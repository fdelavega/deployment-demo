# -- issuance is not required in this example
keycloak:
  enabled: false

## AUTHENTICATION

vcverifier:
  # make the verifier publicly accessible
  ingress:
    enabled: true
    hosts:
      - host: provider-verifier.127.0.0.1.nip.io
        paths:
          - "/"
  deployment:
    verifier:
      # address of the trust anchor
      tirAddress: http://tir.127.0.0.1.nip.io:8080/
      did: did:key:zDnaeh6LHmMZDaPG8Mv7wyStj816FPpNC2Yqxofzrx3wNKA8Y
    # public address of the verifier, to be provided as oid-config
    server:
      host: http://provider-verifier.127.0.0.1.nip.io:8080
    # access to the internal credentials-config-service
    configRepo:
      configEndpoint: http://credentials-config-service:8080

credentials-config-service:
  enabled: true

# internal trusted issuers list
trusted-issuers-list:
  # only open for demo purposes
  ingress:
    til:
      enabled: true
      hosts:
        - host: til-provider.127.0.0.1.nip.io
          paths:
            - /

# mysql used for the credentials config service
mysql:
  primary:
    persistence:
      enabled: true      
      # use one of the classes provided by your cluster
      storageClass: local-path

## AUTHORIZATION

# serves configuration of the dataspace
dataSpaceConfig:
  enabled: true
  
  ## Defaults
  serviceType: ClusterIP
  port: 3002
  supportedModels:
    - "https://raw.githubusercontent.com/smart-data-models/dataModel.Consumption/master/ConsumptionPoint/schema.json"
    - "https://raw.githubusercontent.com/smart-data-models/dataModel.Consumption/master/ConsumptionCost/schema.json"
  supportedProtocols:
    - http
    - https
  authenticationProtocols:
    - oid4vp

# -- apisix configuration
apisix:
  dataPlane:
    # -- configure the ingress to the data service
    ingress:
      enabled: true
      hostname: mp-data-service.127.0.0.1.nip.io 
  catchAllRoute:
    enabled: false
  routes: |-
    # route to answer all openid-config requests to the data service from within the verifier
    - uri: /.well-known/openid-configuration
      host: mp-data-service.127.0.0.1.nip.io
      upstream:
        nodes:
          verifier:3000: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          uri: /services/data-service/.well-known/openid-configuration
    # route to provider data-space-configuration
    - uri: /.well-known/data-space-configuration
      host: mp-data-service.127.0.0.1.nip.io
      upstream:
        nodes:
          dsconfig:3002: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          uri: /.well-known/data-space-configuration/data-space-configuration.json
        response-rewrite:
          headers:
            set:
              content-type: application/json
    # central route to the dataservice
    - uri: /*
      host: mp-data-service.127.0.0.1.nip.io
      upstream:
        nodes:
          data-service-scorpio:9090: 1
        type: roundrobin
      plugins:
        # verify the jwt at the verifiers endpoint
        openid-connect:
          bearer_only: true
          use_jwks: true
          client_id: data-service
          client_secret: unused
          ssl_verify: false
          discovery: http://verifier:3000/services/data-service/.well-known/openid-configuration
        # request decisions at opa
        opa:
          host: "http://localhost:8181"
          policy: policy/main
          with_body: true

# -- configuration for the open-policy-agent to be deployed as part of the connector fulfilling the role of the PDP, as a sidecar to apisix
opa:
  # -- should an opa sidecar be deployed to apisix
  enabled: true

# database used for odrl-pap
postgresql:
  primary:
    persistence:
      enabled: true      
      # use one of the classes provided by your cluster
      storageClass: local-path

# policy administration point
odrl-pap:
  additionalEnvVars:
    # needs to know the providers identity to 
    - name: GENERAL_ORGANIZATION_DID
      value: did:key:zDnaeh6LHmMZDaPG8Mv7wyStj816FPpNC2Yqxofzrx3wNKA8Y
  additionalMapping:
    # -- should an additional mapping.json be loaded
    enabled: false
    # -- mapping.json to merged with the defaults
    # the example would overwrite the default odrl:use to be handled by a custom rego method provided with the additional rego 
    json: |
      {
        "leftOperand": {
          "vc": {
            "crole": {
              "regoPackage": "custom.leftOperand as cus_lo",
              "regoMethod": "cus_lo.crole(helper.verifiable_credential, helper.organization_did)"
            }
          }
        }
      }
  additionalRego:
    # -- should additional packages be loaded
    enabled: false
    packages: |
      custom.leftOperand.rego: |
        package custom.leftOperand

        import rego.v1

        ## vc:crole
        # retrieves the roles from the credential, that target the current organization
        crole(verifiable_credential,organization_id) := r if {
            roles := verifiable_credential.credentialSubject.roles
            orgId := verifiable_credential.issuer
            role := [rad | some rad in roles; rad.target = orgId ]
            r = role[_].names; trace(orgId)
        }

  ingress:
    enabled: true
    hosts:
      - host: pap-provider.127.0.0.1.nip.io
        paths:
          - "/"

# database used for scorpio
postgis:
  primary:
    persistence:
      enabled: true      
      # use one of the classes provided by your cluster
      storageClass: local-path

# the data service
scorpio:
  enabled: true

  # configuration for the dataservice at the credentials-config-service
  ccs:
    defaultOidcScope:
      name: default
    oidcScopes:
      default:
        - type: UserCredential
          trustedParticipantsLists:
            - http://tir.trust-anchor.svc.cluster.local:8080
          trustedIssuersLists:
            - http://trusted-issuers-list:8080
      operator:
        - type: OperatorCredential
          trustedParticipantsLists:
            - http://tir.trust-anchor.svc.cluster.local:8080
          trustedIssuersLists:
            - http://trusted-issuers-list:8080

## TMForum API

# tmforum apis to support contracting
tm-forum-api:
  enabled: false

# contract management component and the credential type it should register for a bought service
contract-management:
  enabled: false
